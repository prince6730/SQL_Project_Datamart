SELECT * FROM weekly_sales;

-- drop table clean_weekly_sales;

/*
   In a single query, perform the following operations and generate a new table in the data_mart schema named clean_weekly_sales:
   
1. Add a week_number as the second column for each week_date value, for example any value from the 1st of January to 7th of
   January will be 1, 8th to 14th will be 2, etc.
2. Add a month_number with the calendar month for each week_date value as the 3rd column
3. Add a calendar_year column as the 4th column containing either 2018, 2019 or 2020 values
4. Add a new column called age_band after the original segment column using the following mapping on the number inside the
   
  
segment value |  segment age_band

   1          |       Young Adults

   2          |       Middle Aged

   3 or 4     |       Retirees

5. Add a new demographic column using the following mapping for the first letter in the segment values:

segment | demographic |
C | Couples |
F | Families |

6. Ensure all null string values with an &quot;unknown&quot; string value in the original segment column as well as the
   new age_band and demographic columns
7. Generate a new avg_transaction column as the sales value divided by transactions rounded to 2 decimal places for each
   record 
*/

CREATE TABLE clean_weekly_sales AS
SELECT week_date,
WEEK(week_date) AS week_number,
MONTH(week_date) AS month_number,
YEAR(week_date) AS calender_year,
region, platform,
CASE
   WHEN segment = null THEN 'Unknown'
   ELSE segment
   END AS segment,
CASE
   WHEN RIGHT(segment, 1) = '1' THEN 'Young Adults'
   WHEN RIGHT(segment, 1) = '2' THEN 'Middle Aged'
   WHEN RIGHT(segment, 1) IN('3','4') THEN 'Retirees'
   ELSE 'Unknown'
   END AS age_band,
CASE
   WHEN LEFT(segment, 1) = 'C' THEN 'Couples'
   WHEN LEFT(segment, 1) =' F' THEN 'Families'
   ELSE 'Unknown'
   END AS demographic,
customer_type, transactions, sales,
ROUND(sales/transactions,2) AS 'avg_transaction'
FROM weekly_sales;


SELECT * from clean_weekly_sales;




-- 1. Which week numbers are missing from the dataset?

create table seq100 
      (x int not null auto_increment primary key);

insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();
insert into seq100 values (),(),(),(),(),(),(),(),(),();

insert into seq100 select x + 50 from seq100;

select * from seq100;

create table seq52 as (select x from seq100 limit 52);

select distinct x as week_day from seq52 where x not in(select distinct week_number from clean_weekly_sales); 

select distinct week_number from clean_weekly_sales;


-- 2. How many total transactions were there for each year in the dataset?

SELECT calender_year, SUM(transactions) As total_transactions FROM clean_weekly_sales GROUP BY calender_year;

-- 3. What are the total sales for each region for each month?

SELECT region, month_number, SUM(sales) As total_sales
FROM clean_weekly_sales
GROUP BY region, month_number
ORDER BY region, month_number;

-- 4.What is the total count of transactions for each platform?

SELECT platform, COUNT(transactions) AS total_transactions
FROM clean_weekly_sales
GROUP BY platform;

-- 5. What is the percentage of sales for Retail vs Shopify for each month?

with cte_monthly_platform_sales AS (
      SELECT month_number, calender_year, platform,
      SUM(sales) AS monthly_sales
      FROM clean_weekly_sales
      GROUP BY month_number, calender_year, platform
)
SELECT 
  month_number, calender_year,
  ROUND(100 * MAX(CASE WHEN platform = 'Retail' THEN monthly_sales ELSE NULL END) / SUM(monthly_sales) ,2) AS retail_percentage,
  ROUND(100 * MAX(CASE WHEN platform = 'Shopify' THEN monthly_sales ELSE NULL END) / SUM(monthly_sales), 2) AS shopify_percentage
FROM cte_monthly_platform_sales
GROUP BY month_number , calender_year
ORDER BY month_number , calender_year;
 
-- 6. What is the percentage of sales by demographic for each year in the dataset?

SELECT calender_year, demographic, SUM(sales) AS yearly_sales,
ROUND((100 * SUM(sales) / SUM(SUM(sales)) OVER (PARTITION BY demographic)),2) AS percentage
FROM clean_weekly_sales
GROUP BY calender_year, demographic
ORDER BY calender_year, demographic;

-- 7. Which age_band and demographic values contribute the most to Retail sales?

SELECT age_band, demographic, SUM(sales) total_sales
FROM clean_weekly_sales
WHERE platform ='Retail'
GROUP BY age_band, demographic
ORDER BY total_sales DESC;


